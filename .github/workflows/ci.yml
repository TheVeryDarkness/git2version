name: CI

on:
  push:
  pull_request:
  schedule:
      - cron: "0 0 15 * *" # monthly

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: build_test
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: ["stable", "nightly", "1.82.0"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true
      - run: |
          for features in "" "--no-default-features" "--all-features" ; do
            for profile in "" "--release" ; do
              echo "Running: cargo build $features $profile --all-targets"
              cargo build $features $profile --all-targets
              echo "Running: cargo test $features $profile -- --test-threads=1"
              cargo test $features $profile -- --test-threads=1
              cargo clean
            done
          done
  test_min_versions:
    name: build_test_minimal_versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Nightly because -Z direct-minimal-versions is a nightly cargo feature
        toolchain: ["nightly"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: "update"
          args: "-Z direct-minimal-versions"
      - run: |
          for features in "" "--no-default-features" "--all-features" ; do
            for profile in "" "--release" ; do
              echo "Running: cargo build $features $profile --all-targets"
              cargo build $features $profile --all-targets
              echo "Running: cargo test $features $profile -- --test-threads=1"
              cargo test $features $profile -- --test-threads=1
              cargo clean
            done
          done
  clippy_check:
    name: Linter (clippy)
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          default: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -D warnings
  code_format:
    name: Code Formatter (rustfmt)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          default: true
      - uses: mbrobbel/rustfmt-check@0.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  sync_readme:
    name: Sync README.md (cargo sync-readme)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: cargo install cargo-rdme
    - run: ./gen_readme.sh
    # Fail job if gen_readme.sh introduced changes. If this fails, then we need to run gen_readme.sh locally and add it to the commit.
    - run: git diff --exit-code
  dead_doc_links:
    name: Find dead doc links
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
    - run: RUSTDOCFLAGS="-Dwarnings" cargo doc
  semver_checks:
    name: Check semver
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: obi1kenobi/cargo-semver-checks-action@v2
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
      - name: Install cargo-llvm-cov # See https://github.com/taiki-e/cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v3
        with:
          #token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: lcov.info
          fail_ci_if_error: true
          verbose: true
